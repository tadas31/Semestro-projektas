using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.SceneManagement;

public class PlayerMovement : MonoBehaviour {

    public static Rigidbody2D rdbd;

    public float maxSpeed;   // Max player movement speed, used to limit its velocity
    float maxSpeedx; //Max player movement speed, used to reset speed limits
    public static float moveSpeedJ; // Player movement speed
    public static float jumpHeight; 
    public float drag;
    
    private bool canClimb;
    private bool isClimbing;

    public JoystickMovement jsMovement;
    public static Vector3 dir;    // Joystick direction
    private Vector3 dirAir;

    public bool grounded = false;
    public Transform groundCheck;
    float groundRadius = 0.2f;
    public LayerMask whatIsGround;

    private bool isFalling;

    public Animator Animator;
    bool facingRight = true;

    bool isPoped = false;

    static int ropeNodes;
    //FixedJoint2D fixedJoint;

    // Use this for initialization
    void Start () {
        moveSpeedJ = 1.5f;
        jumpHeight = 350.0f;

        rdbd = GetComponent<Rigidbody2D>();
        Animator.SetBool("IsGrounded", true);
<<<<<<< HEAD

        maxSpeedx = maxSpeed;
=======
        //fixedJoint = GetComponent<FixedJoint2D>();
        //fixedJoint.enabled = false;

>>>>>>> Rope
    }

    // Update is called once per frame
    void Update () {
        if (isGrounded() && Input.GetKeyDown(KeyCode.Space)) // Player jumps when SPACE keyboard button is pressed
        {
            Debug.Log("Space");
            Jump();
        }
        if (isClimbing && Input.GetKeyDown(KeyCode.Space))
        {
            RopeJump();
        }
        LevelScript.jumButton.onClick.RemoveAllListeners();
        if (isGrounded() && !cameraMovement.moveCamera)              // Player jumps when screen button is pressed
        {
            LevelScript.jumButton.onClick.AddListener(Jump);
        }

        if (isClimbing && Input.GetKeyDown(KeyCode.Space))
        {
            LevelScript.jumButton.onClick.AddListener(RopeJump);
        }

        CheckIfFalling();                                    // Checking if player is falling
      
        if(rdbd.velocity.magnitude > maxSpeed)               // Limiting player movements speed
        {
            rdbd.velocity = Vector2.ClampMagnitude(rdbd.velocity, maxSpeed);
        }

        if (!cameraMovement.moveCamera)
        {
            if (!isGrounded()) // Sets direction to 0, so when jumping jumping animation activates
                dirAir.x = 0;
            if (dir.x < 0 && facingRight)
                Flip();
            else if (dir.x > 0 && !facingRight)
                Flip();

            Animator.SetBool("IsGrounded", isGrounded());       // For jumping animation
            Animator.SetFloat("Speed", Mathf.Abs(dirAir.x));    // For running animation
        }
        
        //transform.rotation = Quaternion.Euler(0.0f, 0.0f, 0f);
    }

    /// <summary>
    /// Flips the player according to joystick position
    /// </summary>
    void Flip()
    {
        facingRight = !facingRight;
        Vector3 theScale = transform.localScale;
        theScale.x *= -1;
        rdbd.transform.localScale = theScale;
    }

    void Jump()
    {
        rdbd.AddForce(new Vector2(0, jumpHeight));       
    }

    void RopeJump()
    {
        isClimbing = false;
        rdbd.isKinematic = false;
        canClimb = false;
        rdbd.velocity = dir;
    }

    bool isGrounded()
    {
        return grounded = Physics2D.OverlapCircle(groundCheck.position, groundRadius, whatIsGround);
    }

    private void FixedUpdate()
    {
        
        dir = jsMovement.InputDirection;
        dirAir = dir;
        
        if (isGrounded() && !cameraMovement.moveCamera)  // Player can be moved when it's on the ground and when camera movement is false
        {
            rdbd.velocity += new Vector2(dir.x / moveSpeedJ, 0);
            rdbd.drag = drag;                    // To reduce sliding
        }
        else rdbd.drag = 0;

        if (canClimb && dir.y > 0.3f)
        {
            isClimbing = true;
        }

        if (isClimbing)
        {
            MovementOnTheLadder();
        }

        
    }

    /// <summary>
    /// Checking if player is currently falling
    /// </summary>
    private void CheckIfFalling()
    {
        if (rdbd.velocity.y < -0.1)
        {
            isFalling = true;
        }
        else
        {
            isFalling = false;
        }
    }

    /// <summary>
    /// Player bounces when it jumps on a trampoline
    /// </summary>
    private void TrampolineBounce(float height)
    {
        Debug.Log("Heigth " + height);
        Debug.Log(rdbd.velocity.y);
        rdbd.velocity += new Vector2(0, -rdbd.velocity.y);
        rdbd.AddForce(new Vector2(0, height));
    }

    private void Slide(float force)
    {
        rdbd.AddForce(new Vector2(force,-force/2));
    }

    private void OnCollisionStay2D(Collision2D collision)
    {
        if (collision.gameObject.tag == "LadderTop" && (dir.y < 0))
        {
            collision.gameObject.GetComponentInParent<LadderScript>().CanGoThrow();
            canClimb = true;
            isClimbing = true;
        }
        if (collision.gameObject.tag == "Slide")
        {
            Slide(collision.gameObject.GetComponent<SlideScript>().slideForce);
        }
    }

    private void OnCollisionEnter2D(Collision2D collision)
    {
        if (collision.gameObject.tag == "Trampoline" && isFalling)
        {
            TrampolineBounce(collision.gameObject.GetComponent<TrampolineScript>().height);
        }
        if (collision.gameObject.tag == "Bridge")
        {
            maxSpeed *= 0.2f;
        }
    }
    private void OnCollisionExit2D(Collision2D collision)
    {
        if (collision.gameObject.tag == "Bridge")
        {
            maxSpeed = maxSpeedx;
        }
    }

    private void OnTriggerEnter2D(Collider2D collision)
    {
        if (collision.gameObject.tag == "Ladder")
        {
            canClimb = true;
            rdbd.gravityScale = 0;
            collision.gameObject.GetComponent<LadderScript>().CanGoThrow();
        }
        if (collision.gameObject.tag == "Falling_zone")
        {
            FallingPlatform.inZone = true;
            Debug.Log("yra");
        }
        if (collision.gameObject.tag == "Rope")
        {
            if (ropeNodes == 0)
            {
                rdbd.velocity = Vector2.zero;
                rdbd.isKinematic = true;
                canClimb = true;
                isClimbing = true;
            }
            //fixedJoint.enabled = true;
            //fixedJoint.connectedBody = collision.gameObject.GetComponent<Rigidbody2D>();
            ropeNodes++;


        }


    }

    private void OnTriggerStay2D(Collider2D other)
    {
        if (other.gameObject.tag == "Rope")
        {
            transform.parent = other.transform;
            transform.rotation = Quaternion.Euler(0.0f, 0.0f, 0f);
        }
    }

    private void OnTriggerExit2D(Collider2D collision)
    {
        if (collision.gameObject.tag == "Ladder" || (collision.gameObject.tag == "LadderTop" && dir.y > 0))
        {
            canClimb = false;
            isClimbing = false;
            collision.gameObject.GetComponent<LadderScript>().CannotGoThrow();
            rdbd.gravityScale = 1;
        }
        if (collision.gameObject.tag == "Rope")
        {
            ropeNodes--;
            if (ropeNodes == 0)
            {
                transform.parent = null;
                //fixedJoint.enabled = false;
                //fixedJoint.connectedBody = null;
                canClimb = false;
                isClimbing = false;
                rdbd.isKinematic = false;
                transform.rotation = Quaternion.Euler(0.0f, 0.0f, 0f);
            }
        }
    }


    /// <summary>
    /// Player moves on a ladder
    /// </summary>
    public static void MovementOnTheLadder()
    {      
        //rdbd.velocity = Vector2.zero;
        rdbd.transform.Translate(dir * Time.deltaTime * moveSpeedJ);
        //rdbd.velocity += new Vector2(dir.x / moveSpeedJ, dir.y / moveSpeedJ);
    }

}
